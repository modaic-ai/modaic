SchemaSerializer(serializer=Model( ModelSerializer { class: Py( 0x000000013ba43a30, ), serializer: Fields( GeneralFieldsSerializer { fields: { "metadata": SerField { key_py: Py( 0x00000001027576f0, ), alias: None, alias_py: None, serializer: Some( WithDefault( WithDefaultSerializer { default: DefaultFactory( Py( 0x0000000104a2ee50, ), false, ), serializer: Dict( DictSerializer { key_serializer: Any( AnySerializer, ), value_serializer: Any( AnySerializer, ), filter: SchemaFilter { include: None, exclude: None, }, name: "dict[any, any]", }, ), }, ), ), required: true, serialize_by_alias: None, }, "id": SerField { key_py: Py( 0x0000000104a41510, ), alias: None, alias_py: None, serializer: Some( WithDefault( WithDefaultSerializer { default: DefaultFactory( Py( 0x00000001261336a0, ), false, ), serializer: Str( StrSerializer, ), }, ), ), required: true, serialize_by_alias: None, }, "parent": SerField { key_py: Py( 0x0000000104b07dc0, ), alias: None, alias_py: None, serializer: None, required: true, serialize_by_alias: None, }, "a": SerField { key_py: Py( 0x0000000104aa4048, ), alias: None, alias_py: None, serializer: Some( Str( StrSerializer, ), ), required: true, serialize_by_alias: None, }, "b": SerField { key_py: Py( 0x0000000104a97a48, ), alias: None, alias_py: None, serializer: Some( Int( IntSerializer, ), ), required: true, serialize_by_alias: None, }, }, computed_fields: Some( ComputedFields( [], ), ), mode: SimpleDict, extra_serializer: None, filter: SchemaFilter { include: None, exclude: None, }, required_fields: 5, }, ), has_extra: false, root_model: false, name: "CustomContext", }, ), definitions=[])